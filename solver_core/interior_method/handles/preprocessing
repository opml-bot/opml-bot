# -*- coding: utf-8 -*-
"""prepocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wgBC8QvAO5JNdVMp57JyhQ_NnEUJZkqO
"""

import numpy as np
import math

from math import sqrt

import sympy.integrals.rubi.utility_function
from sympy import sympify, Symbol, simplify
from sympy.utilities.lambdify import lambdastr
from typing import Optional, Callable


def get_variables(function: str) -> list:
    """
    Функция достает из записанной в аналитическом виде функции переменные.
    Замечание: так как по правилам ввода переменные должны иметь вид x1, x2, x3, ..., xn, то в случае если функция
    зависит только от переменных x1, x5 переменные x2, x3, x4 будут созданы автоматически
    Parameters
    ----------
    function: str
        Функция в аналитическом виде
    Returns
    -------
    variables: list
        Список с переменными типа sympy.Symbol, отсортированные по возрастанию индекса.
    """

    function = sympify(function)
    var = list(function.free_symbols)
    var_str = [str(i) for i in var]
    max_index = int(max(var_str, key=lambda x: x[1:])[1:])
    for i in range(1, max_index):
        if f'x{i}' not in var_str:
            var_str.append(f'x{i}')
    var_str.sort(key=lambda x: int(x[1:]))
    variables = [Symbol(i) for i in var_str]
    return variables


def restrict(restrictions: list,func: sympy.core.relational):
    """
    Переписывает ограничения для решения задачи. Все ограничения должны быть
    вида ***функция ограничения*** = 0
    Parameters
    ----------
    function: str
         Функия ограничения method
    Returns
    -------
    rewrited: sympy expression
        Переписання функция.
    """
    res = []
    count = max(len(get_variables(f)),len(get_variables(restrictions[0])))+1
    for i in restrictions:
      function = str(i)
      if function.find('<=') == -1 and function.find('>=') == -1 or function.count('<=') > 1 or function.count('>=') > 1:
          raise ValueError(f'Невозможно переписать ограничения {function} должным образом.')
      elif function.find('<=') != -1:
          left, right = function.split('<=')
          left = -sympify(left)
          right = -sympify(right)
          left = left - right
          new_x = sympify('-x'+str(count))
          count +=1
          left = left + new_x
      elif function.find('>=') != -1:
          left, right = function.split('>=')
          left = sympify(left)
          right = sympify(right)
          left = left - right
          new_x = sympify('-x'+str(count))
          count +=1
          left = left + new_x
      rewrited = left
      res.append(rewrited)
    return res

if __name__ == '__main__':
    f = 'x1**2 + x2**2'
    consts = ['x1 >= 0', 'x1 - x2 >=100', 'x2<=0']
    vars = get_variables(f)
    restrict(consts,f)
