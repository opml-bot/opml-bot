# -*- coding: utf-8 -*-
"""gomori.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qkHSNTthNqjfHXVwCOlrDDOvF9GW0QZA
"""

import numpy as np
from sympy import *
import math

from import *

def gomori(matrix, function, basis, analysis):

    matrix_1, function_1, basis_1 = simplex_method(matrix, function, basis, analysis)

    xs = np.arange(len(matrix_1))+1

    flag = False

    for i in range(len(matrix_1[:, 0])):
      if math.modf(matrix_1[:, 0][i])[0] > 0:
        flag = True
        
    while flag:
      
      max = 0
      pos = 0
      for i in range(len(matrix_1[:, 0])):
        if math.modf(matrix_1[:, 0][i])[0] > max:
          max = math.modf(matrix_1[:, 0][i])[0]
          pos = i

      small_parts = [-max]
      for i in matrix_1[pos][1:]:
        if math.modf(i)[0] >= 0:
          small_part = -math.modf(i)[0]
        else:
          small_part = -(1 + math.modf(i)[0])
        small_parts.append(small_part)
      small_parts.append(1)

      add = []
      len_m = len(matrix_1)
      for i in range(len_m):
        add.append(0)

      matrix_2 = []
      for i in range(len(matrix_1)):
        a = list(matrix_1[i])
        a.append(add[i])
        matrix_2.append(a)
      matrix_2.append(small_parts)
      matrix_1 = np.array(matrix_2)

      function_1 = np.append(function_1,0)
      function_1 *= -1
      basis_1 = np.append(basis_1,len(function_1))

     
      index_output = len(matrix_1)-1

      matrix_copy = matrix_1[index_output][1:]
      min_f_x = 1000
      index_input = 0
      for i in range(len(function_1)):
        if matrix_copy[i] != 0 and (function_1[i]/matrix_copy[i]) < min_f_x:
          min_f_x  = (function_1[i]/matrix_copy[i])
          index_input = i
      index_input+=1
      
      basis_1[-1] = index_input
      matrix_1 = recount(matrix_1,index_input,index_output)
      function_1 = recount_function(matrix_1,index_input,index_output,function_1)

      check = 0
      for i in xs:
        if i in basis_1:
          check+=1
      
      check_2 = 0 
      for i in range(len(matrix_1[:, 0])):
        if math.modf(matrix_1[:, 0][i])[0] == 0:
          check_2+=1

      if check == len(xs) and check_2 == len(xs):
        flag = False 

    result = list()
    for i in xs:
      for j in range(len(basis_1)):
        if basis_1[j] == i:
          result.append(matrix_1[:,0][j])

    return(result)

f = '4*x1 + 5*x2 + 6*x3'
consts = ['1*x1 + 2*x2 + 3*x3 <= 35','4*x1 + 3*x2 + 2*x3 <= 45','3*x1 + 1*x2 + 1*x3 <= 40']
A,B,C,grades = restrict(consts,f,'max')

mat, fun, bas = canonization(A, B, C, grades)

gomori(mat, fun, bas, True)

